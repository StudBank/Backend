
networks:
  web:
    external: true
  monitoring:
    internal: true
  logging:
    internal: true
  tracing:
    internal: true
  database:
    internal: true
  loki:
    internal: true

services:
  traefik:
    image: traefik
    ports:
      - "80:80"
      - "443:443"  # Removed port 8080 as insecure API is disabled
    volumes:
      - ./envs/dev/sec:/certs:ro
      - ./infra/traefik:/etc/traefik:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=web"
      - "traefik.http.routers.api.entryPoints=websecure"
      - "traefik.http.routers.api.rule=Host(`traefik.local`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.tls=true"  # Explicit TLS (optional)
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

    networks:
      - web
    # healthcheck:
    #  test: ["CMD", "traefik", "healthcheck", "--ping"]
    #  interval: 10s
    #  timeout: 2s
    #  retries: 3

  postgres:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
      #- ./infra/postgres:/docker-entrypoint-initdb.d:ro
    environment:
      POSTGRES_USER: studbank
      POSTGRES_PASSWORD: ButterFly777
      POSTGRES_DB: backend
    networks:
      - database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 5s
      timeout: 3s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./infra/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
    # depends_on:
     # alertmanager:
        #condition: service_healthy

  alertmanager:
    image: prom/alertmanager:latest
    volumes:
      - ./infra/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s

  cadvisor:
    image: google/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    networks:
      - monitoring
    #healthcheck:
    #  test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8080/healthz"]
    #  interval: 30s
    #  timeout: 5s

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
    privileged: true
    networks:
      - monitoring
    #healthcheck:
    #  test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9100/metrics"]
    #  interval: 30s
    #  timeout: 5s
  # ----------------------------------------------------------    LOKI  DEPLOYMENT -----------------------------------------------------------
  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    volumes:
      - ./infra/loki/config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      loki:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    volumes:
      - ./infra/loki/config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ./infra/alloy/config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command:  run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    depends_on:
      - gateway
    networks:
      - loki

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - loki

  backend:
    image: grafana/loki:latest
    volumes:
      - ./infra/loki/config.yaml:/etc/loki/config.yaml
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    networks:
      - loki
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports: 
      - 7946:7946
    
  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    volumes: 
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 3100:3100 # WARN: Only on DEV
    healthcheck:
      test: ["CMD", "service", "nginx", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - logging
      - loki

  # ----------------------------------------------------------    SYSTEM STATS -----------------------------------------------------------
  promtail:
    image: grafana/promtail:latest
    volumes:
      - /var/log:/var/log
      - ./promtail:/etc/promtail
      - promtail_positions:/tmp/promtail
    command: -config.file=/etc/promtail/config.yml
    networks:
      - logging
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:9080/ready"]
      interval: 30s
      timeout: 5s


# -------------------------------------------------------------    WEB APPLICATIONS   -------------------------------------------------------------
  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/dashboards:/etc/grafana/dashboards:ro
      - ./infra/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ButterFly777
    labels:
      - traefik.enable=true
      - "traefik.docker.network=web"
      - traefik.http.routers.grafana.rule=Host(`grafana.local`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.tls=true
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    networks:
      - web
      - monitoring
      - logging
      - tracing
      - database
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      prometheus:
        condition: service_healthy
      read:
        condition: service_healthy
      write:
        condition: service_healthy
      backend:
        condition: service_healthy
      gateway:
        condition: service_healthy
      #tempo:
        #  condition: service_healthy
      #postgres:
        #  condition: service_healthy

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: gakganapocno@yandex.ru
      PGADMIN_DEFAULT_PASSWORD: ButterFly777
    networks:
      - web
      - database
    labels:
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.http.routers.pgadmin.rule=Host(`pgadmin.local`)
      - traefik.http.routers.pgadmin.entrypoints=websecure
      - traefik.http.routers.pgadmin.tls=true
      - traefik.http.services.pgadmin.loadbalancer.server.port=80
    #healthcheck:
    #  test: ["CMD", "curl", "-f", "http://localhost:80/login?next=%2F"]
    #  interval: 30s
    #  timeout: 10s
    #  retries: 3
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin


  back:
    build: .
    networks:
      - web
      - database
      - monitoring
      - logging
      - tracing
    labels:
      # Main endpoint (8080)
      - traefik.enable=true
      - traefik.docker.network=web
      - traefik.http.routers.back.rule=Host(`back.local`)
      - traefik.http.routers.back.entrypoints=websecure
      - traefik.http.routers.back.tls=true
      - traefik.http.services.back.loadbalancer.server.port=8080

      # Additional endpoint (8082)
      - traefik.http.routers.back-swagger.rule=Host(`swagger.back.local`)
      - traefik.http.routers.back-swagger.entrypoints=websecure
      - traefik.http.routers.back-swagger.tls=true
      - traefik.http.services.back-swagger.loadbalancer.server.port=8082
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v0/sys/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    depends_on:
      postgres:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      grafana: 
        condition: service_healthy


volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  loki_data:
  tempo_data:
  promtail_positions:
  alertmanager_data:
  pgadmin_data:
  minio_data:
